name: publish-marketplace-vsix

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/publish-marketplace-vsix.yml'

jobs:
  build_and_publish:
    runs-on: windows-latest

    env:
      SOLUTION_FILE_NAME: 'DevCracks.Fractalize.Templates.sln'
      VSIX_PROJECT_NAME: 'DevCracks.Fractalize.Templates.Vsix'
      
      SOLUTION_DIRECTORY: 'src' 
      BUILD_CONFIGURATION: 'Release' 

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4 
      with:
        dotnet-version: '8.x'

    - name: Restore NuGet packages
      run: dotnet restore ${{ env.SOLUTION_DIRECTORY }}/${{ env.SOLUTION_FILE_NAME }}

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1 
      with:
        msbuild-version: '17.0'

    - name: Build VSIX Project
      run: msbuild.exe `
        "${{ env.SOLUTION_DIRECTORY }}/${{ env.VSIX_PROJECT_NAME }}/${{ env.VSIX_PROJECT_NAME }}.csproj" `
        /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
        /p:DeployExtension=false `
        /p:ZipPackage=true `
        /t:Build
      shell: pwsh

    - name: Find VSIX File 
      id: find_vsix 
      run: |
        $searchPath = "${{ env.SOLUTION_DIRECTORY }}/${{ env.VSIX_PROJECT_NAME }}/bin/${{ env.BUILD_CONFIGURATION }}"
        Write-Host "DEBUG: Buscando archivo .vsix en el directorio: ${searchPath}"
        
        Write-Host "DEBUG: Contenido de ${searchPath}:" 
        Get-ChildItem -Path $searchPath -ErrorAction SilentlyContinue | ForEach-Object { Write-Host " - $($_.Name)" }

        $vsixFiles = Get-ChildItem -Path $searchPath -Filter "*.vsix" -Recurse -ErrorAction SilentlyContinue
        
        if (-not $vsixFiles) {
          Write-Host "ERROR: ¡Ningún archivo .vsix encontrado en la ruta esperada: ${searchPath}!"
          throw "No se encontró ningún archivo .vsix." 
        }

        $foundVsixFullPath = ($vsixFiles | Select-Object -First 1 -ExpandProperty FullName)
        $vsixPathOutput = $foundVsixFullPath.ToString().Trim()

        if ([string]::IsNullOrWhiteSpace($vsixPathOutput)) {
            Write-Host "ERROR: La ruta del archivo VSIX es nula o vacía después de la selección y limpieza."
            throw "La ruta del archivo VSIX es nula o vacía."
        }

        Write-Host "DEBUG: Archivo VSIX encontrado (FINAL para salida): ${vsixPathOutput}"
        Add-Content -Path $env:GITHUB_OUTPUT -Value "vsix_file=$vsixPathOutput"
      shell: pwsh

    - name: Upload VSIX as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: vsix-package
        path: ${{ steps.find_vsix.outputs.vsix_file }}

    - name: Publish VSIX to Visual Studio Marketplace (using VsixPublisher.exe) # <-- ¡Paso modificado!
      run: |
        # Intentamos localizar VsixPublisher.exe.
        $vsixPublisherPath = Get-ChildItem -Path C:\Users\runneradmin\.nuget\packages\Microsoft.VSSDK.BuildTools\* -Filter VsixPublisher.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -ExpandProperty FullName -First 1

        if (-not $vsixPublisherPath) {
            Write-Host "ERROR: VsixPublisher.exe no se encontró. Asegúrate de que Microsoft.VSSDK.BuildTools está instalado."
            throw "VsixPublisher.exe no encontrado."
        }

        Write-Host "DEBUG: VsixPublisher.exe encontrado en: ${vsixPublisherPath}"

        # 1. Obtener la ruta al source.extension.vsixmanifest
        $vsixManifestSourcePath = "${{ env.SOLUTION_DIRECTORY }}/${{ env.VSIX_PROJECT_NAME }}/source.extension.vsixmanifest"
        
        # 2. Cargar el XML del manifiesto
        [xml]$vsixManifestXml = Get-Content $vsixManifestSourcePath

        # 3. Extraer detalles para el manifiesto JSON de publicación
        $extensionId = $vsixManifestXml.PackageManifest.Metadata.Identity.Id
        $publisherId = $vsixManifestXml.PackageManifest.Metadata.Identity.Publisher
        $version = $vsixManifestXml.PackageManifest.Metadata.Identity.Version
        $displayName = $vsixManifestXml.PackageManifest.Metadata.DisplayName
        # Acceder al texto interno de la descripción (manejar si es nulo o vacío)
        $description = $vsixManifestXml.PackageManifest.Metadata.Description.'#text'
        if ([string]::IsNullOrEmpty($description)) {
            $description = "A Visual Studio extension." # Fallback default description
        }

        # Extraer categorías del manifiesto XML
        $categories = @()
        if ($vsixManifestXml.PackageManifest.Metadata.Categories.Category) {
            # Si hay múltiples categorías, se accede como un array
            $vsixManifestXml.PackageManifest.Metadata.Categories.Category | ForEach-Object { $categories += $_.'#text' }
        }
        # Si no se encuentran categorías en el XML, usar un fallback (aunque ahora deberían estar)
        if ($categories.Count -eq 0) {
            Write-Host "WARNING: No se encontraron categorías en source.extension.vsixmanifest. Usando categorías por defecto."
            $categories = @("Tools", "Productivity") # Fallback si no se definen en XML
        }

        # Construir la ruta absoluta al README.md en la raíz del repositorio
        $repoRoot = "${{ github.workspace }}" 
        $readmePath = Join-Path -Path $repoRoot -ChildPath "README.md"
        # Asegurarse de que el README.md exista
        if (-not (Test-Path -Path $readmePath)) {
            Write-Host "ERROR: El archivo README.md no se encontró en la raíz del repositorio: ${readmePath}"
            throw "README.md no encontrado."
        }


        Write-Host "DEBUG: Datos extraídos del source.extension.vsixmanifest:"
        Write-Host "DEBUG:   ID de la extensión: $extensionId"
        Write-Host "DEBUG:   ID del publicador: $publisherId"
        Write-Host "DEBUG:   Nombre para mostrar: $displayName"
        Write-Host "DEBUG:   Descripción: $description"
        Write-Host "DEBUG:   Versión: $version"
        Write-Host "DEBUG:   Categorías extraídas: $($categories -join ', ')"
        Write-Host "DEBUG:   Ruta del README.md: ${readmePath}"

        # 4. Crear el contenido del manifiesto de publicación JSON con la estructura completa
        $publishManifestContent = @{
            identity = @{ 
                id = $extensionId
                publisher = $publisherId
                version = $version
                internalName = $extensionId 
            }
            # Propiedades de nivel superior
            displayName = $displayName
            description = $description
            categories = $categories 
            galleryFlags = "Public" 
            overview = $readmePath # ¡Añadido: Ruta al archivo README.md!
            # Puedes añadir tags aquí si es necesario, e.g., tags = @("template", "csharp")
        } | ConvertTo-Json -Depth 10 # Convertir a JSON

        # 5. Guardar el manifiesto JSON en un archivo temporal
        $publishManifestJsonPath = "${{ runner.temp }}/publishManifest.json" 
        $publishManifestContent | Out-File -FilePath $publishManifestJsonPath -Encoding utf8

        Write-Host "DEBUG: Manifiesto JSON de publicación creado en: ${publishManifestJsonPath}"
        Write-Host "DEBUG: Contenido del publishManifest.json:"
        Get-Content $publishManifestJsonPath

        Write-Host "DEBUG: Publicando el VSIX con VsixPublisher.exe..."

        # 6. Ejecutar VsixPublisher.exe con los argumentos correctos
        & "${vsixPublisherPath}" publish `
            -payload "${{ steps.find_vsix.outputs.vsix_file }}" `
            -publishManifest "${publishManifestJsonPath}" ` 
            -personalAccessToken "${{ secrets.VS_MARKETPLACE_PAT }}"
      shell: pwsh