name: publish-marketplace-vsix

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/publish-marketplace-vsix.yml'

jobs:
  build_and_publish:
    runs-on: windows-latest

    env:
      SOLUTION_FILE_NAME: 'DevCracks.Fractalize.Templates.sln'
      VSIX_PROJECT_NAME: 'DevCracks.Fractalize.Templates.Vsix'
      
      SOLUTION_DIRECTORY: 'src' 
      BUILD_CONFIGURATION: 'Release' 

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4 
      with:
        dotnet-version: '8.x'

    - name: Restore NuGet packages
      run: dotnet restore ${{ env.SOLUTION_DIRECTORY }}/${{ env.SOLUTION_FILE_NAME }}

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1 
      with:
        msbuild-version: '17.0'

    - name: Build VSIX Project
      run: msbuild.exe `
        "${{ env.SOLUTION_DIRECTORY }}/${{ env.VSIX_PROJECT_NAME }}/${{ env.VSIX_PROJECT_NAME }}.csproj" `
        /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
        /p:DeployExtension=false `
        /p:ZipPackage=true `
        /t:Build
      shell: pwsh

    - name: Find VSIX File 
      id: find_vsix 
      run: |
        $searchPath = "${{ env.SOLUTION_DIRECTORY }}/${{ env.VSIX_PROJECT_NAME }}/bin/${{ env.BUILD_CONFIGURATION }}"
        Write-Host "DEBUG: Buscando archivo .vsix en el directorio: ${searchPath}"
        
        Write-Host "DEBUG: Contenido de ${searchPath}:" 
        Get-ChildItem -Path $searchPath -ErrorAction SilentlyContinue | ForEach-Object { Write-Host " - $($_.Name)" }

        $vsixFiles = Get-ChildItem -Path $searchPath -Filter "*.vsix" -Recurse -ErrorAction SilentlyContinue
        
        if (-not $vsixFiles) {
          Write-Host "ERROR: ¡Ningún archivo .vsix encontrado en la ruta esperada: ${searchPath}!"
          throw "No se encontró ningún archivo .vsix." 
        }

        $foundVsixFullPath = ($vsixFiles | Select-Object -First 1 -ExpandProperty FullName)
        $vsixPathOutput = $foundVsixFullPath.ToString().Trim()

        if ([string]::IsNullOrWhiteSpace($vsixPathOutput)) {
            Write-Host "ERROR: La ruta del archivo VSIX es nula o vacía después de la selección y limpieza."
            throw "La ruta del archivo VSIX es nula o vacía."
        }

        Write-Host "DEBUG: Archivo VSIX encontrado (FINAL para salida): ${vsixPathOutput}"
        Add-Content -Path $env:GITHUB_OUTPUT -Value "vsix_file=$vsixPathOutput"
      shell: pwsh

    - name: Upload VSIX as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: vsix-package
        path: ${{ steps.find_vsix.outputs.vsix_file }}

    - name: Publish VSIX to Visual Studio Marketplace (Manual vsce) # <-- ¡Paso completamente reescrito!
      run: |
        # 1. Instalar Node.js (necesario para npm y vsce)
        # Esto es una acción de GitHub, no un comando de PowerShell.
        # Por lo tanto, no se puede hacer en el bloque 'run' de este paso.
        # ¡Necesitamos un paso separado para setup-node!
        # Por favor, ignora esta sección comentada de 'run'.

        # Los comandos reales para este paso están abajo
        # 2. Instalar vsce globalmente
        npm install -g vsce

        # 3. Publicar el paquete VSIX
        # El PAT debe ser pasado como variable de entorno o directamente.
        # Es mejor como variable de entorno por seguridad.
        # La acción 'vsce' buscará el 'source.extension.vsixmanifest'
        # en el directorio actual o usará el 'packagePath'.
        # Si tu manifest está en la carpeta del proyecto VSIX, el 'vsce' debería encontrarlo.
        # Asegúrate de que el PAT tenga los permisos necesarios en Marketplace.
        vsce publish --packagePath "${{ steps.find_vsix.outputs.vsix_file }}" -p "${{ secrets.VS_MARKETPLACE_PAT }}" --target="Microsoft.VisualStudio.Ide"
      shell: pwsh