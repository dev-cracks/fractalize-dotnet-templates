name: publish-marketplace-vsix

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/publish-marketplace-vsix.yml'

jobs:
  build_and_publish:
    runs-on: windows-latest

    env:
      SOLUTION_FILE_NAME: 'DevCracks.Fractalize.Templates.sln'
      VSIX_PROJECT_NAME: 'DevCracks.Fractalize.Templates.Vsix'
      
      SOLUTION_DIRECTORY: 'src' 
      BUILD_CONFIGURATION: 'Release' 

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4 
      with:
        dotnet-version: '8.x'

    - name: Restore NuGet packages
      run: dotnet restore ${{ env.SOLUTION_DIRECTORY }}/${{ env.SOLUTION_FILE_NAME }}

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1 
      with:
        msbuild-version: '17.0'

    - name: Build VSIX Project
      run: msbuild.exe `
        "${{ env.SOLUTION_DIRECTORY }}/${{ env.VSIX_PROJECT_NAME }}/${{ env.VSIX_PROJECT_NAME }}.csproj" `
        /p:Configuration=${{ env.BUILD_CONFIGURATION }} `
        /p:DeployExtension=false `
        /p:ZipPackage=true `
        /t:Build
      shell: pwsh

    - name: Find VSIX File 
      id: find_vsix 
      run: |
        $searchPath = "${{ env.SOLUTION_DIRECTORY }}/${{ env.VSIX_PROJECT_NAME }}/bin/${{ env.BUILD_CONFIGURATION }}"
        Write-Host "DEBUG: Buscando archivo .vsix en el directorio: ${searchPath}"
        
        Write-Host "DEBUG: Contenido de ${searchPath}:" 
        Get-ChildItem -Path $searchPath -ErrorAction SilentlyContinue | ForEach-Object { Write-Host " - $($_.Name)" }

        $vsixFiles = Get-ChildItem -Path $searchPath -Filter "*.vsix" -Recurse -ErrorAction SilentlyContinue
        
        if (-not $vsixFiles) {
          Write-Host "ERROR: ¡Ningún archivo .vsix encontrado en la ruta esperada: ${searchPath}!"
          throw "No se encontró ningún archivo .vsix." 
        }

        $foundVsixFullPath = ($vsixFiles | Select-Object -First 1 -ExpandProperty FullName)
        $vsixPathOutput = $foundVsixFullPath.ToString().Trim()

        if ([string]::IsNullOrWhiteSpace($vsixPathOutput)) {
            Write-Host "ERROR: La ruta del archivo VSIX es nula o vacía después de la selección y limpieza."
            throw "La ruta del archivo VSIX es nula o vacía."
        }

        Write-Host "DEBUG: Archivo VSIX encontrado (FINAL para salida): ${vsixPathOutput}"
        Add-Content -Path $env:GITHUB_OUTPUT -Value "vsix_file=$vsixPathOutput"
      shell: pwsh

    - name: Upload VSIX as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: vsix-package
        path: ${{ steps.find_vsix.outputs.vsix_file }}

    # --- ¡Volvemos a VsixPublisher.exe! ---
    - name: Publish VSIX to Visual Studio Marketplace (using VsixPublisher.exe)
      run: |
        # Intentamos localizar VsixPublisher.exe.
        # Generalmente está en el paquete NuGet Microsoft.VSSDK.BuildTools.
        # El directorio de packages suele ser C:\Users\runneradmin\.nuget\packages\
        # o similar en los runners.

        # Path común para VsixPublisher.exe
        $vsixPublisherPath = Get-ChildItem -Path C:\Users\runneradmin\.nuget\packages\Microsoft.VSSDK.BuildTools\* -Filter VsixPublisher.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -ExpandProperty FullName -First 1

        if (-not $vsixPublisherPath) {
            Write-Host "ERROR: VsixPublisher.exe no se encontró en la ruta esperada. Asegúrate de que Microsoft.VSSDK.BuildTools está instalado y su versión."
            # Si no se encuentra en la ubicación predeterminada,
            # intenta buscarlo en todo el disco D: o en la carpeta de trabajo, pero esto es más lento.
            # Podrías necesitar un paso de instalación adicional si no está presente.
            # Por ahora, lanzaremos un error.
            throw "VsixPublisher.exe no encontrado."
        }

        Write-Host "DEBUG: VsixPublisher.exe encontrado en: ${vsixPublisherPath}"
        Write-Host "DEBUG: Publicando el VSIX con VsixPublisher.exe..."

        # Ejecutar VsixPublisher.exe
        # El comando es similar a: VsixPublisher.exe publish -payload <path_to_vsix> -publishManifestPath <path_to_vsixmanifest> -personalAccessToken <PAT>
        # Sin embargo, 'vsce publish' ya maneja la lectura del vsixmanifest.
        # VsixPublisher.exe típicamente usa el PAT y la ruta al vsix.
        # El 'publisher' es una parte crucial aquí, que vsce infiere del package.json o vsixmanifest.
        # Para VsixPublisher.exe, debes haber configurado tu publisher en el Marketplace.

        # Comando VsixPublisher.exe:
        # Se necesita el ID del editor (publisher ID) y el ID de la extensión.
        # Estos se obtienen del source.extension.vsixmanifest.
        # Si no lo tienes a mano, podrías necesitar leer el XML.
        # Para simplificar, asumimos que el PAT es suficiente para la identificación.
        # Si da errores de publisher, necesitarás añadir -publisherId <YourPublisherID>
        # Puedes obtener tu publisher ID de la URL de tu publisher en el Marketplace:
        # https://marketplace.visualstudio.com/manage/publishers/YourPublisherID
        # Y el Extension ID del source.extension.vsixmanifest o de la URL de tu extensión:
        # https://marketplace.visualstudio.com/items?itemName=YourPublisherID.YourExtensionID

        # Sintaxis típica para VsixPublisher.exe:
        # VsixPublisher.exe publish -payload "path\to\YourExtension.vsix" -publishManifestPath "path\to\source.extension.vsixmanifest" -personalAccessToken YourPAT
        # O, si el publisher y extension ID ya están en el vsixmanifest:
        # VsixPublisher.exe publish -payload "path\to\YourExtension.vsix" -personalAccessToken YourPAT

        # Ya tenemos el vsix path y el PAT. El vsixmanifest está DENTRO del .vsix,
        # pero VsixPublisher.exe a veces también quiere la ruta al archivo fuente del manifest.
        # Vamos a intentar con solo el payload y PAT primero.

        $vsixManifestSourcePath = "${{ env.SOLUTION_DIRECTORY }}/${{ env.VSIX_PROJECT_NAME }}/source.extension.vsixmanifest"

        & "${vsixPublisherPath}" publish `
            -payload "${{ steps.find_vsix.outputs.vsix_file }}" `
            -publishManifestPath "${vsixManifestSourcePath}" `
            -personalAccessToken "${{ secrets.VS_MARKETPLACE_PAT }}"
      shell: pwsh